import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState } from '../../app/store'
import { API } from '../../api/routes'

export interface IUser {
    login?: string
    email?: string
    _id?: string
}
export interface UserState {
    value: IUser
    status: 'idle' | 'loading' | 'failed'
}

const initialState: UserState = {
    value: {},
    status: 'idle',
}

export const authAsync = createAsyncThunk(
    'user/authAsync',
    async ({ login, password }: { login: string; password: string }) => {
        const response = await fetch(API.getAuthUrl(), {
            method: 'POST',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ login, password }),
        })

        return response.json()
    }
)

export const registerAsync = createAsyncThunk(
    'user/registerAsync',
    async ({
        login,
        email,
        password,
    }: {
        login: string
        email: string
        password: string
    }) => {
        const response = await fetch(API.getUserUrl(), {
            method: 'POST',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ login, email, password }),
        })

        return response.json()
    }
)

export const userSlice = createSlice({
    name: 'user',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setUser: (state, action: PayloadAction<IUser>) => {
            state.value = action.payload
        },
        resetUser: (state) => initialState,
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(authAsync.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(authAsync.fulfilled, (state, action) => {
                state.status = 'idle'
                state.value = action.payload.data
            })
            .addCase(registerAsync.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(registerAsync.fulfilled, (state, action) => {
                state.status = 'idle'
                state.value = action.payload.data
            })
    },
})

export const { setUser, resetUser } = userSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.user.value)`
export const selectUser = (state: RootState) => state.user.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//     (amount: number): AppThunk =>
//     (dispatch, getState) => {
//         const currentValue = selectCount(getState())
//         if (currentValue % 2 === 1) {
//             dispatch(incrementByAmount(amount))
//         }
//     }

export default userSlice.reducer
